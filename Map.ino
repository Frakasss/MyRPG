const byte Tree[]     PROGMEM = {24,20,B00000000,B00000000,B00000000,B00000011,B11111000,B00000000,B00001110,B11101110,B00000000,B00011111,B00011111,B00000000,B00101111,B11111110,B10000000,B01110111,B11111101,B11000000,B10111000,B11100011,B10100000,B11011111,B00011111,B01100000,B11101111,B11111110,B11100000,B11110001,B11110001,B11100000,B10111110,B00001111,B10100000,B11011111,B11111111,B01100000,B01101111,B11111110,B11000000,B00110001,B11110001,B10000000,B00011110,B00001111,B00000000,B00000111,B11111100,B00000000,B00000111,B11111100,B00000000,B00001111,B11111110,B00000000,B00011111,B11111111,B00000000,B00011111,B10111111,B00000000,};
const byte FenceH[]   PROGMEM = {16,10,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01100011,B00000000,B10010100,B10000000,B11111111,B10000000,B11111111,B10000000,B11110111,B10000000,B00000000,B00000000,B00000000,B00000000,};
const byte FenceV[]   PROGMEM = {16,10,B00001100,B00000000,B00010010,B00000000,B00011110,B00000000,B00011110,B00000000,B00011110,B00000000,B00001100,B00000000,B00010010,B00000000,B00011110,B00000000,B00011110,B00000000,B00011110,B00000000,};
const byte Bush[]     PROGMEM = {16,10,B00000000,B00000000,B00011100,B00000000,B01101010,B00000000,B11010101,B00000000,B10101010,B10000000,B11010101,B10000000,B10101010,B10000000,B11010101,B10000000,B01111111,B00000000,B00011100,B00000000,};
const byte House[]    PROGMEM = {24,20,B00000000,B00000000,B00000000,B00011111,B11111111,B10000000,B00101111,B11111111,B01000000,B01101111,B11111111,B01100000,B01101111,B11111111,B01100000,B11101111,B11111111,B01110000,B11111111,B11111111,B11110000,B11100000,B00000000,B01110000,B11011111,B11111111,B10110000,B11011111,B11111111,B10110000,B10111111,B11111111,B11010000,B10111111,B11111111,B11010000,B11111111,B11111111,B11110000,B01000000,B00000000,B00100000,B01011101,B11111011,B10100000,B01010101,B00001010,B10100000,B01010101,B00001010,B10100000,B01011101,B00001011,B10100000,B01000001,B00001000,B00100000,B01111111,B00001111,B11100000,};
const byte Church[]   PROGMEM = {24,20,B00000000,B01100000,B00000000,B00000000,B11110000,B00000000,B00000001,B11111000,B00000000,B00000011,B11111100,B00000000,B00000111,B11111110,B00000000,B00001111,B11111111,B00000000,B00000100,B00000010,B00000000,B00000100,B01100010,B00000000,B00000100,B10010010,B00000000,B00011100,B10010011,B10000000,B00111100,B01100011,B11000000,B01111100,B00000011,B11100000,B11111100,B00000011,B11110000,B11111100,B11110011,B11110000,B01000101,B00001010,B00100000,B01010101,B00001010,B10100000,B01010101,B00001010,B10100000,B01000101,B00001010,B00100000,B01111101,B00001011,B11100000,B00000111,B00001110,B00000000,};
const byte BushDead[] PROGMEM = {16,10,B00000000,B00000000,B00100011,B00000000,B10110110,B01000000,B10011100,B11000000,B11001101,B10000000,B01101111,B10000000,B00111111,B00000000,B00011100,B00000000,B00001110,B00000000,B00011111,B00000000,};
const byte Grave[]    PROGMEM = {16,10,B00111110,B00000000,B01001001,B00000000,B01011101,B00000000,B01001001,B00000000,B01001001,B00000000,B01000001,B00000000,B01111111,B00000000,B01010101,B00000000,B00101010,B00000000,B01010101,B00000000,};
const byte Rock[]     PROGMEM = {16,10,B00000000,B00000000,B00110000,B00000000,B01111000,B00000000,B01011110,B00000000,B11001111,B00000000,B10000111,B10000000,B10010111,B11000000,B10100111,B11000000,B01111111,B11000000,B00000000,B00000000,};

const byte Home01[]   PROGMEM = {};
const byte Home02[]   PROGMEM = {};
const byte Shop[]     PROGMEM = {84,48,B00111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11000000,B00110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,B00101000,B00110110,B11011011,B11011110,B11110111,B10001010,B00101000,B10101010,B00110001,B10000001,B01000000,B00100100,B00011100,B01110011,B11011110,B01100011,B00011011,B01101100,B11101110,B01111011,B11000010,B01000000,B00100010,B00011100,B01110010,B01010010,B00000000,B00000000,B00000000,B11101110,B00000000,B00000100,B01000000,B00100001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B01000000,B00100000,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11110000,B01000000,B00100000,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10001111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B00010000,B01000000,B00100000,B10001010,B10101010,B10101010,B10101100,B00000010,B10101010,B10101010,B10101011,B00010000,B01000000,B00100000,B10001101,B01010101,B01010101,B01010100,B00000011,B01010101,B01010101,B01010101,B00010000,B01000000,B00100000,B10001111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B00010000,B01000000,B00100000,B10001000,B01000010,B00010000,B10000100,B00000010,B00000000,B00000000,B00000001,B00010000,B01000000,B00100000,B10001001,B01000010,B01010000,B10010100,B00000011,B10110101,B10110101,B10110101,B00010000,B01000000,B00100000,B10001010,B01001010,B10010010,B10100100,B00000011,B11111111,B11111111,B11111111,B00010000,B01000000,B00100000,B10001000,B01010010,B00010100,B10000100,B00000010,B00000000,B00000000,B00000001,B00010000,B01000000,B00100000,B10001000,B01000010,B00010000,B10000100,B00000010,B11010110,B10110101,B10101101,B00010000,B01000000,B00100000,B10001111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B00010000,B01000000,B00100000,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10001111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B00010000,B01000000,B00100000,B10001010,B10101010,B10101010,B10101100,B00000010,B10101010,B10101010,B10101011,B00010000,B01000000,B00100000,B10001101,B01010101,B01010101,B01010100,B00000011,B01010101,B01010101,B01010101,B00010000,B01000000,B00100000,B10001111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B00010000,B01000000,B00100000,B10001000,B00000000,B00000000,B00000100,B00000010,B00010000,B10000100,B00100001,B00010000,B01000000,B00100000,B10001110,B11010110,B11010110,B11010100,B00000010,B01010000,B10010100,B00100101,B00010000,B01000000,B00100000,B10001111,B11111111,B11111111,B11111100,B00000010,B10010010,B10100100,B10101001,B00010000,B01000000,B00100000,B10001000,B00000000,B00000000,B00000100,B00000010,B00010100,B10000101,B00100001,B00010000,B01000000,B00100000,B10001011,B01011010,B11010110,B10110100,B00000010,B00010000,B10000100,B00100001,B00010000,B01000000,B00100000,B10001111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B00010000,B01000000,B00100000,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000001,B11100000,B00111100,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000011,B11110000,B00100100,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000111,B00010000,B01111100,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000110,B10110000,B10100100,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000110,B00010111,B11000100,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000101,B11100100,B10000100,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000001,B11100100,B10000100,B00000000,B00000000,B00000000,B00000000,B00010000,B01000000,B00100000,B10000000,B00000001,B11100111,B11111100,B00000000,B01001001,B00100100,B00000000,B00010000,B01000000,B00100000,B10000000,B00000001,B00100101,B01010100,B00000000,B01101101,B10110110,B00000000,B00010000,B01000000,B00100000,B10000000,B00000000,B00000111,B11111100,B00000000,B01001001,B00100100,B00000000,B00010000,B01000000,B00100000,B11111111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B11110000,B01000000,B00100001,B00000000,B00000000,B00000000,B00000100,B00000010,B01001001,B00100100,B00011000,B11001000,B01000000,B00100010,B00000000,B00000000,B00000000,B00000100,B00000010,B01001001,B00100100,B00100101,B00100100,B01000000,B00100100,B00000000,B00000000,B00000000,B00000100,B00000010,B00100100,B10010010,B00001000,B01000010,B01000000,B00101000,B00000000,B00000000,B00000000,B00000100,B00000010,B00100100,B10010010,B00001000,B01000001,B01000000,B00110000,B00000000,B00000000,B00000000,B00000100,B00000010,B00000000,B00000000,B00000000,B00000000,B11000000,B00111111,B11111111,B11111111,B11111111,B11111100,B00000011,B11111111,B11111111,B11111111,B11111111,B11000000,};
const byte* house[]={Home02,Shop};

const byte* mapCountry[] ={Tree,Bush,FenceV,FenceH};
const byte* mapVillage[] ={House,Bush,FenceV,FenceH};
const byte* mapCimetery[]={Church,Grave,FenceV,FenceH};
const byte* mapMountain[]={Tree,Bush,BushDead,Rock};
const byte maps[9] = {0,0,0,0,1,0,2,3,3};

const byte m000[] PROGMEM = {32,5,B10000000,B00000101,B00000000,B00111010, B00000000,B00000000,B00000000,B00000000, B00000000,B00000100,B10000000,B00000000, B10000000,B00000000,B00000000,B00000000, B00000000,B00010001,B00000000,B00000000,};
const byte m001[] PROGMEM = {32,5,B00010000,B01000010,B00000000,B10100101, B00000000,B00000000,B00000000,B00000000, B00000000,B00000000,B00000000,B00000000, B00000000,B00000010,B00000000,B00000000, B00000000,B11100000,B00000000,B00000000,};
const byte m002[] PROGMEM = {32,5,B00101010,B11000000,B00000000,B00000000, B00000000,B00000000,B00000000,B00000000, B00000010,B00000000,B00000000,B00000000, B00000000,B00000000,B00000000,B00000000, B00000000,B00000001,B00000000,B00000000,};
const byte m003[] PROGMEM = {32,5,B00000000,B10000000,B00000000,B01010001, B00000100,B00000000,B10000000,B00000000, B00010000,B10000000,B00000000,B00000000, B00000000,B00000000,B10000000,B00000000, B00000000,B10000000,B00000000,B00000000,};
const byte m004[] PROGMEM = {32,5,B01000000,B10000000,B00000000,B00000000, B00000010,B00001000,B00000000,B00000100, B00000000,B00000100,B00001000,B00000000, B00000000,B01100000,B00000000,B00000100, B00000000,B00000000,B00000000,B00000000,};
const byte m005[] PROGMEM = {32,5,B00000000,B00000001,B00000000,B00000000, B10000010,B00000000,B00000000,B00000000, B00010000,B00000000,B00000000,B00000000, B00000010,B00000000,B00000000,B00000000, B00000000,B00000000,B00000000,B00000000,};
const byte m006[] PROGMEM = {32,5,B00000000,B00000000,B10000000,B00000000, B00000000,B00101010,B10000001,B00000000, B00000000,B00000000,B10000000,B00000000, B00000000,B00101010,B10000001,B00000000, B00000000,B00000000,B10000000,B01111110,};
const byte m007[] PROGMEM = {32,5,B00000000,B00000000,B00000000,B00000000, B00000010,B00000000,B00100000,B10001000, B00000000,B00100000,B00000000,B00000000, B00000100,B00000000,B00000000,B10000001, B00000000,B00110001,B10000000,B01001000,};
const byte m008[] PROGMEM = {32,5,B00000010,B00000000,B00000000,B00000000, B00000000,B00000000,B10010000,B00000000, B00000000,B00000000,B10000000,B00000001, B10000010,B00000000,B00000000,B00000000, B00000000,B00000000,B00000000,B00111100,};

const byte* mapZip[]={m000,m001,m002,
                      m003,m004,m005,
                      m006,m007,m008,};


//#####################################################
//#####################################################
void init_houses(){
  mapSpecial[0].sprite = 4; mapSpecial[0].x = 16;  mapSpecial[0].y = 13;  mapSpecial[0].typ = 0;
  mapSpecial[1].sprite = 4; mapSpecial[1].x = 66;  mapSpecial[1].y = 23;  mapSpecial[1].typ = 1;
}                      

//#####################################################
//#####################################################
void output_map(){
      switch(gamestatus){ 
      case 0:
      drawMap(mapZip[map_current],map_current,0,0);
      break;

      case 1:
      drawMap(mapZip[map_previous],map_previous,horiz_previous,vert_previous);
      drawMap(mapZip[map_current],map_current,horiz_current,vert_current);
      switch(dir){
        case 0:
        if(horiz_current-slidespeed>0){
          horiz_current=horiz_current-slidespeed;
          horiz_previous=horiz_previous-slidespeed;
        }else{
          map_previous=map_current;
          horiz_current=0;
          horiz_previous=0;
        }
        break;
        case 1:
        if(horiz_current+slidespeed<0){
          horiz_current=horiz_current+slidespeed;
          horiz_previous=horiz_previous+slidespeed;
        }else{
          //map_previous=map_current;
          horiz_current=0;
          horiz_previous=0;
        }
        break;
        case 2:
        if(vert_current-slidespeed>0){
          vert_current=vert_current-slidespeed;
          vert_previous=vert_previous-slidespeed;
        }else{
          //map_previous=map_current;
          vert_current=0;
          vert_previous=0;
        }
        break;
        case 3:
        if(vert_current+slidespeed<0){
          vert_current=vert_current+slidespeed;
          vert_previous=vert_previous+slidespeed;
        }else{
          //map_previous=map_current;
          vert_current=0;
          vert_previous=0;
        }
        break;
      }
      break;

      case 4:
      gb.display.drawBitmap(0,0,house[house_current]);
      break;
    }
}

//#####################################################
//#####################################################
void output_transition(){
  if(gamestatus==2 || gamestatus==3 || gamestatus==5 || gamestatus==6){
    gb.display.setColor(BLACK);
    gb.display.fillRect(0,0,84,48);
    gb.display.setColor(WHITE);
    gb.display.fillRect(animTransition,animTransition,84-(2*animTransition),48-(2*animTransition));
    gb.display.setColor(BLACK);
  }
  switch(gamestatus){
    case 2:
    drawMap(mapZip[map_current],map_current,0,0);
    if(animTransition+6>24){
      gamestatus=3;
      player.x = 39;
      player.y = 42;
      player.dir = 3;
    }
    else{animTransition = animTransition + 6;}
    break;
    
    case 3:
    gb.display.drawBitmap(0,0,house[house_current]);
    if(animTransition-6<0){gamestatus=4;}
    else{animTransition = animTransition - 6;}
    break;

    case 5:
    gb.display.drawBitmap(0,0,house[house_current]);
    if(animTransition+6>24){
      gamestatus=6;
    }
    else{animTransition = animTransition + 6;}
    break;
    
    case 6:
    drawMap(mapZip[map_current],map_current,0,0);
    if(animTransition-6<0){gamestatus=0;}
    else{animTransition = animTransition - 6;}
    break;
  }
}









//#####################################################
//#####################################################
void drawMap(const uint8_t *bitmap,byte spriteSet, int8_t horiz, int8_t vert) {
  w = pgm_read_byte(bitmap);
  h = pgm_read_byte(bitmap + 1);
  bitmap = bitmap + 2;
  byteWidth = (w + 7) / 8;
  for (j=0; j<h; j++) {
    for (i=0; i<w; i++) {
      if (pgm_read_byte(bitmap + j * byteWidth + i / 8) & (B10000000 >> (i % 8))) {
        switch(maps[spriteSet]){
          case 0: gb.display.drawBitmap(((i%8)*10)+horiz,((j*10)-1)+vert,mapCountry[i/8]); break;
          case 1: gb.display.drawBitmap(((i%8)*10)+horiz,((j*10)-1)+vert,mapVillage[i/8]); break;
          case 2: gb.display.drawBitmap(((i%8)*10)+horiz,((j*10)-1)+vert,mapCimetery[i/8]);break;
          case 3: gb.display.drawBitmap(((i%8)*10)+horiz,((j*10)-1)+vert,mapMountain[i/8]);break;
        }
      }
    }
  }
}
